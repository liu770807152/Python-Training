'''
交换变量
如下的小技巧很巧妙，可以为你节省多行代码：
'''
a = 1
b = 2
a, b = b, a
print(a, b) # 2 1

'''
函数都应该满足幂等性：不管被调用了多少次，幂等函数总是在给定相同参数集的情况下返回相同的值。
结果不依赖于非局部变量、参数的可变性或来自任何 I/O 流的数据。
为什么幂等很重要？
因为可维护性和可维护性。幂等函数很容易测试，因为在使用相同的参数时，它们总是返回相同的结果。
测试仅仅是检查通过不同调用返回值的预期值。更重要的是，这些测试很快，这是单元测试中一个重要且经常被忽视的问题。
而在处理幂等函数时，重构是轻而易举的事情。无论如何在函数之外更改代码，使用相同的参数调用它的结果总是一样的。

默认值陷阱：当默认值是空list时，不再满足幂等性原则
'''
def evil(v=[]):
    v.append(1)
    print(v)

evil() # [1]
evil() # [1, 1]

'''
文档字符串（Docstrings）
虽然每个人似乎都知道 PEP - 8，它定义了 Python 的样式指南，但是很少有人知道 PEP - 257，它是关于文档字符串的。我再这里不简单地重复 PEP - 257 的内容了，你可以在闲暇时读一下。其中的关键内容是：

每个函数都需要有一个文档字符串
使用适当的语法和标点符号；用完整的句子写
首先对函数的作用进行一句话的总结
使用说明性语言而不是描述性语言
在编写函数时，要养成写文档字符串的习惯，并在编写函数代码之前尝试写一下。

如果你不能写一个清晰的文档字符串来描述函数做什么，就说明你需要再考虑考虑为什么要写这个函数了。
'''